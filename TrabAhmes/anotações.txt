A = (x+y)*z
B = inteiro(A/2n)
Se z ≠ 0, então C = inteiro((x-y)/z). Se z = 0, então C = 1
Se z ≠ 0, então D = resto((x-y)/z). Se z = 0, então D = 0
=================================================================
x, y, z, n, C, D: variáveis de 1 byte
A, B: variáveis de 2 bytes – A (a1, a0) e B(b1, b0), sendo a1 e b1 as parcelas mais significativas
dos números.
todas as variáveis serão consideradas números inteiros positivos.
------------------------------------------------------------------
- não será considerado overflow 
- inicia no endereço 0 de memoria
- usar para variáveis adicionais ou para código extra os endereços de memória 138 em diante;
- no cálculo, os valores das entradas x, y, z, n não devem ser modificados. Ou seja, se for necessário
modificar, deve-se copiar o valor destas variáveis para variáveis de trabalho (a partir do endereço
138) e codificar o algoritmo usando estas variáveis de trabalho;
==================================================================
DECLARAÇÃO DE VARIAVEIS:
============================ORG 128===============================
;A (a1, a0) e B(b1, b0) (msql e lsql)
x:  DB ;128 1 byte
y:  DB ;129 1 byte
z:  DB ;130 1 byte
n:  DB ;131 1 byte
a1: DB ;132
a0: DB ;133
b1: DB ;134
b0: DB ;135
C:  DB ;136 1 byte
D:  DB ;137 1 byte
oito: DB 8 ;constante 8
zero: DB 0 ; constante 0
um: DB   1 ; constante 1
i:  DB     ; varivel contador
mcador: DB ;multiplicador(B) de A x B
copy_maux  DB ; copia do multiplicar(B) de A x B 
mcando: DB ;multiplicando(A) de A x B (A + A + A + A)
================================alg.multiplicação==================================
; 1. Inicio: i=8; Pmsb=0, maux=m
       LDA Oito
       STA i
       LDA Zero
       STA Pmsb
       LDA mcador
       STA maux
; 2. Desloca maux p/direita, bit menos significativo vai p/carry
laco:  LDA maux
       SHR
       STA maux
; 3. Se carry = 0, pula a soma (passo 4)
       JNC C0
; 4. P = P + M
       LDA Pmsb
       ADD Mcando
       STA Pmsb
; 5 Desloca P e p, com carry
C0:    LDA Pmsb
       ROR
       STA Pmsb
       LDA plsb
       ROR
       STA plsb
; 6. Decrementa contador (i)
       LDA i
       SUB Um
       STA i
; 7. Se n!=0, voltar para o passo 2
       JNZ laco
; Se não, terminar
       HLT
=====================================DIVISÃO========================================
inicio:
; teste de exceções: estouro e div. por zero
     LDA v
     JZ  div_por_zero ; divisor = 0
; não ocorreu nenhuma exceção: inicialização
     LDA Dms
     STA Dmst ; Dms temporário
     LDA dls
     STA dlst ; dls temporário
     LDA oito
     STA i    ; contador = 8
     LDA zero
     STA q    ; quociente = 0repetir:           ; início do laço

repetir:           ; início do laço
     LDA q
     SHL
     STA q         ; desloca q p/esquerda
     LDA dlst
     SHL
     STA dlst      ; desloca d p/esquerda
     LDA Dmst
     ROL           ; desloca D p/esquerda
     STA Dmst      ; msbit de D em carry
     JC  Dms_maior ; se C=1, D > v
     LDA Dmst
     SUB v         ; calcula D - v
     JB  Dms_menor ; se B=1, D < vDms_maior:
Dms_maior:
     LDA Dmst    ; se D >= v
     SUB v       ; pode subtrair
     STA Dmst
     LDA q       ; e novo dígito de q
     OR  um      ; deve ser igual a 1
     STA q
Dms_menor:
     LDA i
     SUB um      ; decrementa contador
     STA i
     JNZ repetir ; se i > 0, repete o laço

fim:            ; fim normal
     LDA Dmst
     STA r      ; resto = Dmst
     LDA um     ; estado = 1
     JMP estado

div_por_zero:   ; fim com erro: div. por zero
     JMP estado

estado:
     HLT

; definição de variáveis e constantes
      ORG 128  ; começando na palavra 128
Dms:  DB 0     ; msbits do dividendo
dls:  DB 0     ; lsbits do dividendo
v:    DB 0     ; divisor
q:    DB 0     ; quociente
r:    DB 0     ; resto
i:    DB 0     ; contador
zero: DB 0     ; constante 0
um:   DB 1     ; constante 1
mum:  DB 255   ; constante -1
oito: DB 8     ; constante 8
Dmst: DB 0     ; msbits do dividendo - temp
dlst: DB 0     ; lsbits do dividendo - temp

